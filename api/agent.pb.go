// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: agent.proto

package agent

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetISCSIQualifiedNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetISCSIQualifiedNameRequest) Reset() {
	*x = GetISCSIQualifiedNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetISCSIQualifiedNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetISCSIQualifiedNameRequest) ProtoMessage() {}

func (x *GetISCSIQualifiedNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetISCSIQualifiedNameRequest.ProtoReflect.Descriptor instead.
func (*GetISCSIQualifiedNameRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

type GetIPTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIPTablesRequest) Reset() {
	*x = GetIPTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPTablesRequest) ProtoMessage() {}

func (x *GetIPTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPTablesRequest.ProtoReflect.Descriptor instead.
func (*GetIPTablesRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1}
}

type SetupDefaultSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetupDefaultSecurityGroupRequest) Reset() {
	*x = SetupDefaultSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupDefaultSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupDefaultSecurityGroupRequest) ProtoMessage() {}

func (x *SetupDefaultSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupDefaultSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*SetupDefaultSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{2}
}

type AddSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface  string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	IpAddress  string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *AddSecurityGroupRequest) Reset() {
	*x = AddSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecurityGroupRequest) ProtoMessage() {}

func (x *AddSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*AddSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{3}
}

func (x *AddSecurityGroupRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *AddSecurityGroupRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *AddSecurityGroupRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type AddBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddBridgeRequest) Reset() {
	*x = AddBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBridgeRequest) ProtoMessage() {}

func (x *AddBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBridgeRequest.ProtoReflect.Descriptor instead.
func (*AddBridgeRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{4}
}

func (x *AddBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddVLANInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId          uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	ParentInterface string `protobuf:"bytes,2,opt,name=parent_interface,json=parentInterface,proto3" json:"parent_interface,omitempty"`
}

func (x *AddVLANInterfaceRequest) Reset() {
	*x = AddVLANInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVLANInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVLANInterfaceRequest) ProtoMessage() {}

func (x *AddVLANInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVLANInterfaceRequest.ProtoReflect.Descriptor instead.
func (*AddVLANInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{5}
}

func (x *AddVLANInterfaceRequest) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *AddVLANInterfaceRequest) GetParentInterface() string {
	if x != nil {
		return x.ParentInterface
	}
	return ""
}

type AddInterfaceToBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bridge    string `protobuf:"bytes,1,opt,name=bridge,proto3" json:"bridge,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *AddInterfaceToBridgeRequest) Reset() {
	*x = AddInterfaceToBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInterfaceToBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInterfaceToBridgeRequest) ProtoMessage() {}

func (x *AddInterfaceToBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInterfaceToBridgeRequest.ProtoReflect.Descriptor instead.
func (*AddInterfaceToBridgeRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{6}
}

func (x *AddInterfaceToBridgeRequest) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *AddInterfaceToBridgeRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

type AddVirtualMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vcpus      uint32 `protobuf:"varint,2,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	MemoryKib  uint64 `protobuf:"varint,3,opt,name=memory_kib,json=memoryKib,proto3" json:"memory_kib,omitempty"`
	BootDevice string `protobuf:"bytes,4,opt,name=boot_device,json=bootDevice,proto3" json:"boot_device,omitempty"`
}

func (x *AddVirtualMachineRequest) Reset() {
	*x = AddVirtualMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVirtualMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVirtualMachineRequest) ProtoMessage() {}

func (x *AddVirtualMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVirtualMachineRequest.ProtoReflect.Descriptor instead.
func (*AddVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{7}
}

func (x *AddVirtualMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddVirtualMachineRequest) GetVcpus() uint32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *AddVirtualMachineRequest) GetMemoryKib() uint64 {
	if x != nil {
		return x.MemoryKib
	}
	return 0
}

func (x *AddVirtualMachineRequest) GetBootDevice() string {
	if x != nil {
		return x.BootDevice
	}
	return ""
}

type ConnectBlockDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortalAddresses []string `protobuf:"bytes,1,rep,name=portal_addresses,json=portalAddresses,proto3" json:"portal_addresses,omitempty"`
	HostLunId       uint32   `protobuf:"varint,2,opt,name=host_lun_id,json=hostLunId,proto3" json:"host_lun_id,omitempty"`
}

func (x *ConnectBlockDeviceRequest) Reset() {
	*x = ConnectBlockDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectBlockDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectBlockDeviceRequest) ProtoMessage() {}

func (x *ConnectBlockDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectBlockDeviceRequest.ProtoReflect.Descriptor instead.
func (*ConnectBlockDeviceRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectBlockDeviceRequest) GetPortalAddresses() []string {
	if x != nil {
		return x.PortalAddresses
	}
	return nil
}

func (x *ConnectBlockDeviceRequest) GetHostLunId() uint32 {
	if x != nil {
		return x.HostLunId
	}
	return 0
}

type AttachBlockDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SourceDevice string `protobuf:"bytes,2,opt,name=source_device,json=sourceDevice,proto3" json:"source_device,omitempty"`
	TargetDevice string `protobuf:"bytes,3,opt,name=target_device,json=targetDevice,proto3" json:"target_device,omitempty"`
}

func (x *AttachBlockDeviceRequest) Reset() {
	*x = AttachBlockDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachBlockDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachBlockDeviceRequest) ProtoMessage() {}

func (x *AttachBlockDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachBlockDeviceRequest.ProtoReflect.Descriptor instead.
func (*AttachBlockDeviceRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{9}
}

func (x *AttachBlockDeviceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AttachBlockDeviceRequest) GetSourceDevice() string {
	if x != nil {
		return x.SourceDevice
	}
	return ""
}

func (x *AttachBlockDeviceRequest) GetTargetDevice() string {
	if x != nil {
		return x.TargetDevice
	}
	return ""
}

type AttachInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Bridge          string `protobuf:"bytes,2,opt,name=bridge,proto3" json:"bridge,omitempty"`
	InboundAverage  uint32 `protobuf:"varint,3,opt,name=inbound_average,json=inboundAverage,proto3" json:"inbound_average,omitempty"`
	OutboundAverage uint32 `protobuf:"varint,4,opt,name=outbound_average,json=outboundAverage,proto3" json:"outbound_average,omitempty"`
	Name            string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AttachInterfaceRequest) Reset() {
	*x = AttachInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachInterfaceRequest) ProtoMessage() {}

func (x *AttachInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachInterfaceRequest.ProtoReflect.Descriptor instead.
func (*AttachInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{10}
}

func (x *AttachInterfaceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AttachInterfaceRequest) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *AttachInterfaceRequest) GetInboundAverage() uint32 {
	if x != nil {
		return x.InboundAverage
	}
	return 0
}

func (x *AttachInterfaceRequest) GetOutboundAverage() uint32 {
	if x != nil {
		return x.OutboundAverage
	}
	return 0
}

func (x *AttachInterfaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StartVirtualMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *StartVirtualMachineRequest) Reset() {
	*x = StartVirtualMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVirtualMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVirtualMachineRequest) ProtoMessage() {}

func (x *StartVirtualMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVirtualMachineRequest.ProtoReflect.Descriptor instead.
func (*StartVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{11}
}

func (x *StartVirtualMachineRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteBridgeRequest) Reset() {
	*x = DeleteBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBridgeRequest) ProtoMessage() {}

func (x *DeleteBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBridgeRequest.ProtoReflect.Descriptor instead.
func (*DeleteBridgeRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteVLANInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId          uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	ParentInterface string `protobuf:"bytes,2,opt,name=parent_interface,json=parentInterface,proto3" json:"parent_interface,omitempty"`
}

func (x *DeleteVLANInterfaceRequest) Reset() {
	*x = DeleteVLANInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVLANInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVLANInterfaceRequest) ProtoMessage() {}

func (x *DeleteVLANInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVLANInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteVLANInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteVLANInterfaceRequest) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *DeleteVLANInterfaceRequest) GetParentInterface() string {
	if x != nil {
		return x.ParentInterface
	}
	return ""
}

type DeleteInterfaceFromBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bridge    string `protobuf:"bytes,1,opt,name=bridge,proto3" json:"bridge,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *DeleteInterfaceFromBridgeRequest) Reset() {
	*x = DeleteInterfaceFromBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceFromBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceFromBridgeRequest) ProtoMessage() {}

func (x *DeleteInterfaceFromBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceFromBridgeRequest.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceFromBridgeRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteInterfaceFromBridgeRequest) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *DeleteInterfaceFromBridgeRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

// response
type GetISCSIQualifiedNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iqn string `protobuf:"bytes,1,opt,name=iqn,proto3" json:"iqn,omitempty"`
}

func (x *GetISCSIQualifiedNameResponse) Reset() {
	*x = GetISCSIQualifiedNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetISCSIQualifiedNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetISCSIQualifiedNameResponse) ProtoMessage() {}

func (x *GetISCSIQualifiedNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetISCSIQualifiedNameResponse.ProtoReflect.Descriptor instead.
func (*GetISCSIQualifiedNameResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15}
}

func (x *GetISCSIQualifiedNameResponse) GetIqn() string {
	if x != nil {
		return x.Iqn
	}
	return ""
}

type GetIPTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIPTablesResponse) Reset() {
	*x = GetIPTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPTablesResponse) ProtoMessage() {}

func (x *GetIPTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPTablesResponse.ProtoReflect.Descriptor instead.
func (*GetIPTablesResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{16}
}

type SetupDefaultSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetupDefaultSecurityGroupResponse) Reset() {
	*x = SetupDefaultSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupDefaultSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupDefaultSecurityGroupResponse) ProtoMessage() {}

func (x *SetupDefaultSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupDefaultSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*SetupDefaultSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{17}
}

type AddSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddSecurityGroupResponse) Reset() {
	*x = AddSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecurityGroupResponse) ProtoMessage() {}

func (x *AddSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*AddSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{18}
}

type AddBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBridgeResponse) Reset() {
	*x = AddBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBridgeResponse) ProtoMessage() {}

func (x *AddBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBridgeResponse.ProtoReflect.Descriptor instead.
func (*AddBridgeResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{19}
}

type AddVLANInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddVLANInterfaceResponse) Reset() {
	*x = AddVLANInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVLANInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVLANInterfaceResponse) ProtoMessage() {}

func (x *AddVLANInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVLANInterfaceResponse.ProtoReflect.Descriptor instead.
func (*AddVLANInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{20}
}

type AddInterfaceToBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddInterfaceToBridgeResponse) Reset() {
	*x = AddInterfaceToBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInterfaceToBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInterfaceToBridgeResponse) ProtoMessage() {}

func (x *AddInterfaceToBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInterfaceToBridgeResponse.ProtoReflect.Descriptor instead.
func (*AddInterfaceToBridgeResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{21}
}

type AddVirtualMachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddVirtualMachineResponse) Reset() {
	*x = AddVirtualMachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVirtualMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVirtualMachineResponse) ProtoMessage() {}

func (x *AddVirtualMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVirtualMachineResponse.ProtoReflect.Descriptor instead.
func (*AddVirtualMachineResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{22}
}

func (x *AddVirtualMachineResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AddVirtualMachineResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConnectBlockDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (x *ConnectBlockDeviceResponse) Reset() {
	*x = ConnectBlockDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectBlockDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectBlockDeviceResponse) ProtoMessage() {}

func (x *ConnectBlockDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectBlockDeviceResponse.ProtoReflect.Descriptor instead.
func (*ConnectBlockDeviceResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{23}
}

func (x *ConnectBlockDeviceResponse) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type StartVirtualMachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StartVirtualMachineResponse) Reset() {
	*x = StartVirtualMachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVirtualMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVirtualMachineResponse) ProtoMessage() {}

func (x *StartVirtualMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVirtualMachineResponse.ProtoReflect.Descriptor instead.
func (*StartVirtualMachineResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{24}
}

func (x *StartVirtualMachineResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StartVirtualMachineResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AttachBlockDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AttachBlockDeviceResponse) Reset() {
	*x = AttachBlockDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachBlockDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachBlockDeviceResponse) ProtoMessage() {}

func (x *AttachBlockDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachBlockDeviceResponse.ProtoReflect.Descriptor instead.
func (*AttachBlockDeviceResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{25}
}

func (x *AttachBlockDeviceResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AttachBlockDeviceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AttachInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AttachInterfaceResponse) Reset() {
	*x = AttachInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachInterfaceResponse) ProtoMessage() {}

func (x *AttachInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachInterfaceResponse.ProtoReflect.Descriptor instead.
func (*AttachInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{26}
}

func (x *AttachInterfaceResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AttachInterfaceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBridgeResponse) Reset() {
	*x = DeleteBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBridgeResponse) ProtoMessage() {}

func (x *DeleteBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBridgeResponse.ProtoReflect.Descriptor instead.
func (*DeleteBridgeResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{27}
}

type DeleteVLANInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVLANInterfaceResponse) Reset() {
	*x = DeleteVLANInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVLANInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVLANInterfaceResponse) ProtoMessage() {}

func (x *DeleteVLANInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVLANInterfaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteVLANInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{28}
}

type DeleteInterfaceFromBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInterfaceFromBridgeResponse) Reset() {
	*x = DeleteInterfaceFromBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceFromBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceFromBridgeResponse) ProtoMessage() {}

func (x *DeleteInterfaceFromBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceFromBridgeResponse.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceFromBridgeResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{29}
}

var File_agent_proto protoreflect.FileDescriptor

var file_agent_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x53, 0x43, 0x53, 0x49,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x50, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x77,
	0x0a, 0x17, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x5d, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x53,
	0x0a, 0x1b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x6f,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x75, 0x6e,
	0x49, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a,
	0x16, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x29, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x20, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x53, 0x43, 0x53, 0x49,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x71, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x50,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x0a, 0x21, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x13, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x56, 0x4c, 0x41, 0x4e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x43, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x41, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xdc, 0x0a, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x49, 0x53, 0x43, 0x53, 0x49, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x53,
	0x43, 0x53, 0x49, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x53, 0x43, 0x53, 0x49, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x19,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x17, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x12, 0x22, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x12, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x12, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_agent_proto_rawDescOnce sync.Once
	file_agent_proto_rawDescData = file_agent_proto_rawDesc
)

func file_agent_proto_rawDescGZIP() []byte {
	file_agent_proto_rawDescOnce.Do(func() {
		file_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_proto_rawDescData)
	})
	return file_agent_proto_rawDescData
}

var file_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_agent_proto_goTypes = []interface{}{
	(*GetISCSIQualifiedNameRequest)(nil),      // 0: agent.GetISCSIQualifiedNameRequest
	(*GetIPTablesRequest)(nil),                // 1: agent.GetIPTablesRequest
	(*SetupDefaultSecurityGroupRequest)(nil),  // 2: agent.SetupDefaultSecurityGroupRequest
	(*AddSecurityGroupRequest)(nil),           // 3: agent.AddSecurityGroupRequest
	(*AddBridgeRequest)(nil),                  // 4: agent.AddBridgeRequest
	(*AddVLANInterfaceRequest)(nil),           // 5: agent.AddVLANInterfaceRequest
	(*AddInterfaceToBridgeRequest)(nil),       // 6: agent.AddInterfaceToBridgeRequest
	(*AddVirtualMachineRequest)(nil),          // 7: agent.AddVirtualMachineRequest
	(*ConnectBlockDeviceRequest)(nil),         // 8: agent.ConnectBlockDeviceRequest
	(*AttachBlockDeviceRequest)(nil),          // 9: agent.AttachBlockDeviceRequest
	(*AttachInterfaceRequest)(nil),            // 10: agent.AttachInterfaceRequest
	(*StartVirtualMachineRequest)(nil),        // 11: agent.StartVirtualMachineRequest
	(*DeleteBridgeRequest)(nil),               // 12: agent.DeleteBridgeRequest
	(*DeleteVLANInterfaceRequest)(nil),        // 13: agent.DeleteVLANInterfaceRequest
	(*DeleteInterfaceFromBridgeRequest)(nil),  // 14: agent.DeleteInterfaceFromBridgeRequest
	(*GetISCSIQualifiedNameResponse)(nil),     // 15: agent.GetISCSIQualifiedNameResponse
	(*GetIPTablesResponse)(nil),               // 16: agent.GetIPTablesResponse
	(*SetupDefaultSecurityGroupResponse)(nil), // 17: agent.SetupDefaultSecurityGroupResponse
	(*AddSecurityGroupResponse)(nil),          // 18: agent.AddSecurityGroupResponse
	(*AddBridgeResponse)(nil),                 // 19: agent.AddBridgeResponse
	(*AddVLANInterfaceResponse)(nil),          // 20: agent.AddVLANInterfaceResponse
	(*AddInterfaceToBridgeResponse)(nil),      // 21: agent.AddInterfaceToBridgeResponse
	(*AddVirtualMachineResponse)(nil),         // 22: agent.AddVirtualMachineResponse
	(*ConnectBlockDeviceResponse)(nil),        // 23: agent.ConnectBlockDeviceResponse
	(*StartVirtualMachineResponse)(nil),       // 24: agent.StartVirtualMachineResponse
	(*AttachBlockDeviceResponse)(nil),         // 25: agent.AttachBlockDeviceResponse
	(*AttachInterfaceResponse)(nil),           // 26: agent.AttachInterfaceResponse
	(*DeleteBridgeResponse)(nil),              // 27: agent.DeleteBridgeResponse
	(*DeleteVLANInterfaceResponse)(nil),       // 28: agent.DeleteVLANInterfaceResponse
	(*DeleteInterfaceFromBridgeResponse)(nil), // 29: agent.DeleteInterfaceFromBridgeResponse
}
var file_agent_proto_depIdxs = []int32{
	0,  // 0: agent.Agent.GetISCSIQualifiedName:input_type -> agent.GetISCSIQualifiedNameRequest
	1,  // 1: agent.Agent.GetIPTables:input_type -> agent.GetIPTablesRequest
	2,  // 2: agent.Agent.SetupDefaultSecurityGroup:input_type -> agent.SetupDefaultSecurityGroupRequest
	3,  // 3: agent.Agent.AddSecurityGroup:input_type -> agent.AddSecurityGroupRequest
	4,  // 4: agent.Agent.AddBridge:input_type -> agent.AddBridgeRequest
	5,  // 5: agent.Agent.AddVLANInterface:input_type -> agent.AddVLANInterfaceRequest
	6,  // 6: agent.Agent.AddInterfaceToBridge:input_type -> agent.AddInterfaceToBridgeRequest
	7,  // 7: agent.Agent.AddVirtualMachine:input_type -> agent.AddVirtualMachineRequest
	8,  // 8: agent.Agent.ConnectBlockDevice:input_type -> agent.ConnectBlockDeviceRequest
	11, // 9: agent.Agent.StartVirtualMachine:input_type -> agent.StartVirtualMachineRequest
	9,  // 10: agent.Agent.AttachBlockDevice:input_type -> agent.AttachBlockDeviceRequest
	10, // 11: agent.Agent.AttachInterface:input_type -> agent.AttachInterfaceRequest
	12, // 12: agent.Agent.DeleteBridge:input_type -> agent.DeleteBridgeRequest
	13, // 13: agent.Agent.DeleteVLANInterface:input_type -> agent.DeleteVLANInterfaceRequest
	14, // 14: agent.Agent.DeleteInterfaceFromBridge:input_type -> agent.DeleteInterfaceFromBridgeRequest
	15, // 15: agent.Agent.GetISCSIQualifiedName:output_type -> agent.GetISCSIQualifiedNameResponse
	16, // 16: agent.Agent.GetIPTables:output_type -> agent.GetIPTablesResponse
	17, // 17: agent.Agent.SetupDefaultSecurityGroup:output_type -> agent.SetupDefaultSecurityGroupResponse
	18, // 18: agent.Agent.AddSecurityGroup:output_type -> agent.AddSecurityGroupResponse
	19, // 19: agent.Agent.AddBridge:output_type -> agent.AddBridgeResponse
	20, // 20: agent.Agent.AddVLANInterface:output_type -> agent.AddVLANInterfaceResponse
	21, // 21: agent.Agent.AddInterfaceToBridge:output_type -> agent.AddInterfaceToBridgeResponse
	22, // 22: agent.Agent.AddVirtualMachine:output_type -> agent.AddVirtualMachineResponse
	23, // 23: agent.Agent.ConnectBlockDevice:output_type -> agent.ConnectBlockDeviceResponse
	24, // 24: agent.Agent.StartVirtualMachine:output_type -> agent.StartVirtualMachineResponse
	25, // 25: agent.Agent.AttachBlockDevice:output_type -> agent.AttachBlockDeviceResponse
	26, // 26: agent.Agent.AttachInterface:output_type -> agent.AttachInterfaceResponse
	27, // 27: agent.Agent.DeleteBridge:output_type -> agent.DeleteBridgeResponse
	28, // 28: agent.Agent.DeleteVLANInterface:output_type -> agent.DeleteVLANInterfaceResponse
	29, // 29: agent.Agent.DeleteInterfaceFromBridge:output_type -> agent.DeleteInterfaceFromBridgeResponse
	15, // [15:30] is the sub-list for method output_type
	0,  // [0:15] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_agent_proto_init() }
func file_agent_proto_init() {
	if File_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetISCSIQualifiedNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupDefaultSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVLANInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInterfaceToBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVirtualMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectBlockDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachBlockDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVirtualMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVLANInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceFromBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetISCSIQualifiedNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupDefaultSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVLANInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInterfaceToBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVirtualMachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectBlockDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVirtualMachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachBlockDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVLANInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceFromBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_proto_goTypes,
		DependencyIndexes: file_agent_proto_depIdxs,
		MessageInfos:      file_agent_proto_msgTypes,
	}.Build()
	File_agent_proto = out.File
	file_agent_proto_rawDesc = nil
	file_agent_proto_goTypes = nil
	file_agent_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	GetISCSIQualifiedName(ctx context.Context, in *GetISCSIQualifiedNameRequest, opts ...grpc.CallOption) (*GetISCSIQualifiedNameResponse, error)
	GetIPTables(ctx context.Context, in *GetIPTablesRequest, opts ...grpc.CallOption) (*GetIPTablesResponse, error)
	SetupDefaultSecurityGroup(ctx context.Context, in *SetupDefaultSecurityGroupRequest, opts ...grpc.CallOption) (*SetupDefaultSecurityGroupResponse, error)
	AddSecurityGroup(ctx context.Context, in *AddSecurityGroupRequest, opts ...grpc.CallOption) (*AddSecurityGroupResponse, error)
	AddBridge(ctx context.Context, in *AddBridgeRequest, opts ...grpc.CallOption) (*AddBridgeResponse, error)
	AddVLANInterface(ctx context.Context, in *AddVLANInterfaceRequest, opts ...grpc.CallOption) (*AddVLANInterfaceResponse, error)
	AddInterfaceToBridge(ctx context.Context, in *AddInterfaceToBridgeRequest, opts ...grpc.CallOption) (*AddInterfaceToBridgeResponse, error)
	AddVirtualMachine(ctx context.Context, in *AddVirtualMachineRequest, opts ...grpc.CallOption) (*AddVirtualMachineResponse, error)
	ConnectBlockDevice(ctx context.Context, in *ConnectBlockDeviceRequest, opts ...grpc.CallOption) (*ConnectBlockDeviceResponse, error)
	StartVirtualMachine(ctx context.Context, in *StartVirtualMachineRequest, opts ...grpc.CallOption) (*StartVirtualMachineResponse, error)
	AttachBlockDevice(ctx context.Context, in *AttachBlockDeviceRequest, opts ...grpc.CallOption) (*AttachBlockDeviceResponse, error)
	AttachInterface(ctx context.Context, in *AttachInterfaceRequest, opts ...grpc.CallOption) (*AttachInterfaceResponse, error)
	DeleteBridge(ctx context.Context, in *DeleteBridgeRequest, opts ...grpc.CallOption) (*DeleteBridgeResponse, error)
	DeleteVLANInterface(ctx context.Context, in *DeleteVLANInterfaceRequest, opts ...grpc.CallOption) (*DeleteVLANInterfaceResponse, error)
	DeleteInterfaceFromBridge(ctx context.Context, in *DeleteInterfaceFromBridgeRequest, opts ...grpc.CallOption) (*DeleteInterfaceFromBridgeResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetISCSIQualifiedName(ctx context.Context, in *GetISCSIQualifiedNameRequest, opts ...grpc.CallOption) (*GetISCSIQualifiedNameResponse, error) {
	out := new(GetISCSIQualifiedNameResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/GetISCSIQualifiedName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetIPTables(ctx context.Context, in *GetIPTablesRequest, opts ...grpc.CallOption) (*GetIPTablesResponse, error) {
	out := new(GetIPTablesResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/GetIPTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetupDefaultSecurityGroup(ctx context.Context, in *SetupDefaultSecurityGroupRequest, opts ...grpc.CallOption) (*SetupDefaultSecurityGroupResponse, error) {
	out := new(SetupDefaultSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/SetupDefaultSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddSecurityGroup(ctx context.Context, in *AddSecurityGroupRequest, opts ...grpc.CallOption) (*AddSecurityGroupResponse, error) {
	out := new(AddSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/AddSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddBridge(ctx context.Context, in *AddBridgeRequest, opts ...grpc.CallOption) (*AddBridgeResponse, error) {
	out := new(AddBridgeResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/AddBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddVLANInterface(ctx context.Context, in *AddVLANInterfaceRequest, opts ...grpc.CallOption) (*AddVLANInterfaceResponse, error) {
	out := new(AddVLANInterfaceResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/AddVLANInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddInterfaceToBridge(ctx context.Context, in *AddInterfaceToBridgeRequest, opts ...grpc.CallOption) (*AddInterfaceToBridgeResponse, error) {
	out := new(AddInterfaceToBridgeResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/AddInterfaceToBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddVirtualMachine(ctx context.Context, in *AddVirtualMachineRequest, opts ...grpc.CallOption) (*AddVirtualMachineResponse, error) {
	out := new(AddVirtualMachineResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/AddVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ConnectBlockDevice(ctx context.Context, in *ConnectBlockDeviceRequest, opts ...grpc.CallOption) (*ConnectBlockDeviceResponse, error) {
	out := new(ConnectBlockDeviceResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/ConnectBlockDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StartVirtualMachine(ctx context.Context, in *StartVirtualMachineRequest, opts ...grpc.CallOption) (*StartVirtualMachineResponse, error) {
	out := new(StartVirtualMachineResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/StartVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AttachBlockDevice(ctx context.Context, in *AttachBlockDeviceRequest, opts ...grpc.CallOption) (*AttachBlockDeviceResponse, error) {
	out := new(AttachBlockDeviceResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/AttachBlockDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AttachInterface(ctx context.Context, in *AttachInterfaceRequest, opts ...grpc.CallOption) (*AttachInterfaceResponse, error) {
	out := new(AttachInterfaceResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/AttachInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteBridge(ctx context.Context, in *DeleteBridgeRequest, opts ...grpc.CallOption) (*DeleteBridgeResponse, error) {
	out := new(DeleteBridgeResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/DeleteBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteVLANInterface(ctx context.Context, in *DeleteVLANInterfaceRequest, opts ...grpc.CallOption) (*DeleteVLANInterfaceResponse, error) {
	out := new(DeleteVLANInterfaceResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/DeleteVLANInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteInterfaceFromBridge(ctx context.Context, in *DeleteInterfaceFromBridgeRequest, opts ...grpc.CallOption) (*DeleteInterfaceFromBridgeResponse, error) {
	out := new(DeleteInterfaceFromBridgeResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/DeleteInterfaceFromBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	GetISCSIQualifiedName(context.Context, *GetISCSIQualifiedNameRequest) (*GetISCSIQualifiedNameResponse, error)
	GetIPTables(context.Context, *GetIPTablesRequest) (*GetIPTablesResponse, error)
	SetupDefaultSecurityGroup(context.Context, *SetupDefaultSecurityGroupRequest) (*SetupDefaultSecurityGroupResponse, error)
	AddSecurityGroup(context.Context, *AddSecurityGroupRequest) (*AddSecurityGroupResponse, error)
	AddBridge(context.Context, *AddBridgeRequest) (*AddBridgeResponse, error)
	AddVLANInterface(context.Context, *AddVLANInterfaceRequest) (*AddVLANInterfaceResponse, error)
	AddInterfaceToBridge(context.Context, *AddInterfaceToBridgeRequest) (*AddInterfaceToBridgeResponse, error)
	AddVirtualMachine(context.Context, *AddVirtualMachineRequest) (*AddVirtualMachineResponse, error)
	ConnectBlockDevice(context.Context, *ConnectBlockDeviceRequest) (*ConnectBlockDeviceResponse, error)
	StartVirtualMachine(context.Context, *StartVirtualMachineRequest) (*StartVirtualMachineResponse, error)
	AttachBlockDevice(context.Context, *AttachBlockDeviceRequest) (*AttachBlockDeviceResponse, error)
	AttachInterface(context.Context, *AttachInterfaceRequest) (*AttachInterfaceResponse, error)
	DeleteBridge(context.Context, *DeleteBridgeRequest) (*DeleteBridgeResponse, error)
	DeleteVLANInterface(context.Context, *DeleteVLANInterfaceRequest) (*DeleteVLANInterfaceResponse, error)
	DeleteInterfaceFromBridge(context.Context, *DeleteInterfaceFromBridgeRequest) (*DeleteInterfaceFromBridgeResponse, error)
}

// UnimplementedAgentServer can be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (*UnimplementedAgentServer) GetISCSIQualifiedName(context.Context, *GetISCSIQualifiedNameRequest) (*GetISCSIQualifiedNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetISCSIQualifiedName not implemented")
}
func (*UnimplementedAgentServer) GetIPTables(context.Context, *GetIPTablesRequest) (*GetIPTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPTables not implemented")
}
func (*UnimplementedAgentServer) SetupDefaultSecurityGroup(context.Context, *SetupDefaultSecurityGroupRequest) (*SetupDefaultSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupDefaultSecurityGroup not implemented")
}
func (*UnimplementedAgentServer) AddSecurityGroup(context.Context, *AddSecurityGroupRequest) (*AddSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecurityGroup not implemented")
}
func (*UnimplementedAgentServer) AddBridge(context.Context, *AddBridgeRequest) (*AddBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBridge not implemented")
}
func (*UnimplementedAgentServer) AddVLANInterface(context.Context, *AddVLANInterfaceRequest) (*AddVLANInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVLANInterface not implemented")
}
func (*UnimplementedAgentServer) AddInterfaceToBridge(context.Context, *AddInterfaceToBridgeRequest) (*AddInterfaceToBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterfaceToBridge not implemented")
}
func (*UnimplementedAgentServer) AddVirtualMachine(context.Context, *AddVirtualMachineRequest) (*AddVirtualMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVirtualMachine not implemented")
}
func (*UnimplementedAgentServer) ConnectBlockDevice(context.Context, *ConnectBlockDeviceRequest) (*ConnectBlockDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectBlockDevice not implemented")
}
func (*UnimplementedAgentServer) StartVirtualMachine(context.Context, *StartVirtualMachineRequest) (*StartVirtualMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVirtualMachine not implemented")
}
func (*UnimplementedAgentServer) AttachBlockDevice(context.Context, *AttachBlockDeviceRequest) (*AttachBlockDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachBlockDevice not implemented")
}
func (*UnimplementedAgentServer) AttachInterface(context.Context, *AttachInterfaceRequest) (*AttachInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachInterface not implemented")
}
func (*UnimplementedAgentServer) DeleteBridge(context.Context, *DeleteBridgeRequest) (*DeleteBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBridge not implemented")
}
func (*UnimplementedAgentServer) DeleteVLANInterface(context.Context, *DeleteVLANInterfaceRequest) (*DeleteVLANInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVLANInterface not implemented")
}
func (*UnimplementedAgentServer) DeleteInterfaceFromBridge(context.Context, *DeleteInterfaceFromBridgeRequest) (*DeleteInterfaceFromBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterfaceFromBridge not implemented")
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_GetISCSIQualifiedName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetISCSIQualifiedNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetISCSIQualifiedName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/GetISCSIQualifiedName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetISCSIQualifiedName(ctx, req.(*GetISCSIQualifiedNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetIPTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetIPTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/GetIPTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetIPTables(ctx, req.(*GetIPTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetupDefaultSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupDefaultSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetupDefaultSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/SetupDefaultSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetupDefaultSecurityGroup(ctx, req.(*SetupDefaultSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AddSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddSecurityGroup(ctx, req.(*AddSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AddBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddBridge(ctx, req.(*AddBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddVLANInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVLANInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddVLANInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AddVLANInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddVLANInterface(ctx, req.(*AddVLANInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddInterfaceToBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterfaceToBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddInterfaceToBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AddInterfaceToBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddInterfaceToBridge(ctx, req.(*AddInterfaceToBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AddVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddVirtualMachine(ctx, req.(*AddVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ConnectBlockDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectBlockDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ConnectBlockDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/ConnectBlockDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ConnectBlockDevice(ctx, req.(*ConnectBlockDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StartVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).StartVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/StartVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).StartVirtualMachine(ctx, req.(*StartVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AttachBlockDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachBlockDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AttachBlockDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AttachBlockDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AttachBlockDevice(ctx, req.(*AttachBlockDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AttachInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AttachInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AttachInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AttachInterface(ctx, req.(*AttachInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/DeleteBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteBridge(ctx, req.(*DeleteBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteVLANInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVLANInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteVLANInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/DeleteVLANInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteVLANInterface(ctx, req.(*DeleteVLANInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteInterfaceFromBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceFromBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteInterfaceFromBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/DeleteInterfaceFromBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteInterfaceFromBridge(ctx, req.(*DeleteInterfaceFromBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetISCSIQualifiedName",
			Handler:    _Agent_GetISCSIQualifiedName_Handler,
		},
		{
			MethodName: "GetIPTables",
			Handler:    _Agent_GetIPTables_Handler,
		},
		{
			MethodName: "SetupDefaultSecurityGroup",
			Handler:    _Agent_SetupDefaultSecurityGroup_Handler,
		},
		{
			MethodName: "AddSecurityGroup",
			Handler:    _Agent_AddSecurityGroup_Handler,
		},
		{
			MethodName: "AddBridge",
			Handler:    _Agent_AddBridge_Handler,
		},
		{
			MethodName: "AddVLANInterface",
			Handler:    _Agent_AddVLANInterface_Handler,
		},
		{
			MethodName: "AddInterfaceToBridge",
			Handler:    _Agent_AddInterfaceToBridge_Handler,
		},
		{
			MethodName: "AddVirtualMachine",
			Handler:    _Agent_AddVirtualMachine_Handler,
		},
		{
			MethodName: "ConnectBlockDevice",
			Handler:    _Agent_ConnectBlockDevice_Handler,
		},
		{
			MethodName: "StartVirtualMachine",
			Handler:    _Agent_StartVirtualMachine_Handler,
		},
		{
			MethodName: "AttachBlockDevice",
			Handler:    _Agent_AttachBlockDevice_Handler,
		},
		{
			MethodName: "AttachInterface",
			Handler:    _Agent_AttachInterface_Handler,
		},
		{
			MethodName: "DeleteBridge",
			Handler:    _Agent_DeleteBridge_Handler,
		},
		{
			MethodName: "DeleteVLANInterface",
			Handler:    _Agent_DeleteVLANInterface_Handler,
		},
		{
			MethodName: "DeleteInterfaceFromBridge",
			Handler:    _Agent_DeleteInterfaceFromBridge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
